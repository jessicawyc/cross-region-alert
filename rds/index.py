import json
import boto3
import os
import datetime
from datetime import date

def lambda_handler(event, context):
    #test whether it is a cross region replicate or a local one
    targetregion=event["detail"]["awsRegion"]
    sourcearn=event["detail"]["responseElements"]["readReplicaSourceDBInstanceIdentifier"]
    if ':' in sourcearn:
        sourceregion=sourcearn.split(':',6)[3]
        user=event["detail"]["userIdentity"]["principalId"]
        aws_account_id=sourcearn.split(':',6)[4]
        rds=sourcearn.split(':',6)[6]
        text=rds+' in account '+aws_account_id+' is transferring data from '+sourceregion+' to '+targetregion+'\n by identity:  '+user
        sns(text)
        #在目标region生成一条sechub finding
        sh = boto3.client('securityhub',region_name=targetregion)
        create_securityhub_finding (aws_account_id,targetregion,sourcearn,text,sh) 
        #给compliance team发送邮件通知
    return {
        'statusCode': 200,
        'body': json.dumps('bon travailler')
    }
def sns(text):
    sns_client = boto3.client('sns')
    snsTopicArn=os.environ['snsarn']
    snsBody='''Hello legal/compliance team:
    We are happy to alert you that one of your database,
    '''
    snsBody+=text
    snsBody+='''
    Please kindly check the details for compliance.
    if you have any concern, please feel free to contact your IT team
    Thank you!
    '''
    response = sns_client.publish(TopicArn=snsTopicArn,Message=snsBody)
    print(response)
def create_securityhub_finding (aws_account_id,region,resourceid,text,sh):
    alerttype='Effects/Data Exfiltration/RDS Replica Cross Region'
    title='SIEM Alert-Cross Region replicate of RDS'
    alertdes=text
    resourcetype='AwsRdsDbInstance'
    d = datetime.datetime.now()
    new_recorded_time = d.isoformat() + "Z"
    findings=[]
    sh_payload = {
    "SchemaVersion": '2018-10-08',
    "Title": title,
    "AwsAccountId":aws_account_id ,
    "CreatedAt":new_recorded_time ,
    "UpdatedAt":new_recorded_time ,
    "Description": alertdes,
    "FindingProviderFields": {
        "Severity": {
            "Label": "CRITICAL",
            "Original":"CRITICAL"
        },
        "Types": [alerttype]
    },
    "GeneratorId": "SIEM Alert generated by lambda",
    "Id": 'arn:aws:siem:'+region+':'+aws_account_id+':finding/data'+resourceid+str(d),# 中国区的话aws-cn
    "ProductArn": 'arn:aws:securityhub:' + region + ':'+aws_account_id+':product/'+aws_account_id+'/default',# 中国区的话aws-cn
    "Resources": [{
        'Type': resourcetype,
        'Region': region,
        'Id': resourceid
    }],
    "Note": {
        "Text": "Please review this event and take actions",
        "UpdatedBy":"data cross region finding",
        "UpdatedAt":new_recorded_time
    }
}
    findings.append(sh_payload)
    
    print('Creating custom Security Hub finding...')
    try:
        response = sh.batch_import_findings(
        Findings=findings
        )
        print("Successfully imported {} Security Hub findings".format(response['SuccessCount']))
    except Exception as e:
        print(e)
